openapi: 3.0.0
info:
  version: 1.0.0
  title: Library_Management
  description: An API to manage books and authors in a library.

paths:
  /books:
    get:
      summary: Get all books
      description: Retrieve a list of all books with optional filters by bookName and releaseDate.
      parameters:
        - name: bookName
          in: query
          required: false
          schema:
            type: string
        - name: releaseDateStart
          in: query
          description: Start date for filtering books
          required: false
          schema:
            type: string
            format: date
        - name: releaseDateEnd
          in: query
          description: End date for filtering books
          required: false
          schema:
            type: string
            format: date
      responses:
        '200':
          description: A list of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    post:
      summary: Add a new book
      description: Create a new book record.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '201':
          description: Book created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
    put:
      summary: Update a book
      description: Update an existing book record. The request is idempotent.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: Book updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
    delete:
      summary: Delete a book
      description: Delete a book by its ID.
      parameters:
        - name: bookId
          in: path
          description: ID of the book to delete
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Book deleted successfully

  /authors:
    get:
      summary: Get all authors
      description: Retrieve a list of all authors with optional filter by name.
      parameters:
        - name: authorName
          in: query
          description: Filter authors by name
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A list of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    post:
      summary: Add a new author
      description: Create a new author record.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        '201':
          description: Author created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
    put:
      summary: Update an author
      description: Update an existing author record. The request is idempotent.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        '200':
          description: Author updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
    delete:
      summary: Delete an author
      description: Delete an author by their ID.
      parameters:
        - name: authorId
          in: path
          description: ID of the author to delete
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Author deleted successfully

components:
  schemas:
    Book:
      type: object
      required:
        - id
        - bookName
        - author
        - pageNumbers
        - topic
        - releaseDate
      properties:
        id:
          type: integer
          description: Unique identifier for the book
        bookName:
          type: string
          description: The name of the book
        author:
          type: string
          description: Name of the author
        pageNumbers:
          type: integer
          description: Number of pages in the book
        topic:
          type: string
          enum: [ROMANCE, COMEDY, OTHER]
          description: The book's topic/genre
        releaseDate:
          type: string
          format: date
          description: The book's release date

    Author:
      type: object
      required:
        - id
        - name
        - sex
      properties:
        id:
          type: integer
          description: Unique identifier for the author
        name:
          type: string
          description: Full name of the author
        sex:
          type: string
          enum: [M, F]
          description: Gender of the author (M for Male, F for Female)

servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/HEiJOICEJ2/Library/1.0.0
