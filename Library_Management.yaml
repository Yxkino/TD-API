openapi: 3.0.0
info:
  version: 1.0.0
  title: Library_Management
  description: An API to manage books and authors in a library.

paths:
  /api/v1/books:
    get:
      tags:
        - Books
      summary: Get all books
      description: Retrieve a list of all books with optional filters
      parameters:
        - name: bookName
          in: query
          required: false
          schema:
            type: string
        - name: releaseDateStart
          in: query
          description: Start date for filtering books
          required: false
          schema:
            type: string
            format: date
        - name: releaseDateEnd
          in: query
          description: End date for filtering books
          required: false
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Book'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Books
      summary: Add a new book
      description: Create a new book record
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookRequest'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Book'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/books/{id}:
    put:
      tags:
        - Books
      summary: Update a book
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Book'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Books
      summary: Delete a book
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/authors:
    get:
      tags:
        - Authors
      summary: Get all authors
      parameters:
        - name: authorName
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Author'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Authors
      summary: Add a new author
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorRequest'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Author'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
        bookName:
          type: string
        author:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum: [ROMANCE, COMEDY, OTHER]
        releaseDate:
          type: string
          format: date

    BookRequest:
      type: object
      required:
        - bookName
        - author
        - pageNumbers
        - topic
        - releaseDate
      properties:
        bookName:
          type: string
        author:
          type: string
        pageNumbers:
          type: integer
          minimum: 1
        topic:
          type: string
          enum: [ROMANCE, COMEDY, OTHER]
        releaseDate:
          type: string
          format: date

    Author:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        sex:
          type: string
          enum: [M, F]

    AuthorRequest:
      type: object
      required:
        - name
        - sex
      properties:
        name:
          type: string
          minLength: 1
        sex:
          type: string
          enum: [M, F]

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: Invalid request parameters

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: Resource not found

    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: Internal server error

servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/HEiJOICEJ2/Library/1.0.0
